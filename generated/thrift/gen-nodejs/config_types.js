//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var apriltag_ttypes = require('./apriltag_types.js');
var camera_ttypes = require('./camera_types.js');
var lidar_ttypes = require('./lidar_types.js');
var pos_extrapolator_ttypes = require('./pos_extrapolator_types.js');
var pathfinding_ttypes = require('./pathfinding_types.js');


var ttypes = module.exports = {};
var Config = module.exports.Config = function(args) {
  this.pos_extrapolator = null;
  this.cameras = null;
  this.lidar_configs = null;
  this.april_detection = null;
  this.pathfinding = null;
  this.record_replay = null;
  this.replay_folder_path = null;
  if (args) {
    if (args.pos_extrapolator !== undefined && args.pos_extrapolator !== null) {
      this.pos_extrapolator = new pos_extrapolator_ttypes.PosExtrapolator(args.pos_extrapolator);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pos_extrapolator is unset!');
    }
    if (args.cameras !== undefined && args.cameras !== null) {
      this.cameras = Thrift.copyList(args.cameras, [camera_ttypes.CameraParameters]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cameras is unset!');
    }
    if (args.lidar_configs !== undefined && args.lidar_configs !== null) {
      this.lidar_configs = Thrift.copyMap(args.lidar_configs, [lidar_ttypes.LidarConfig]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lidar_configs is unset!');
    }
    if (args.april_detection !== undefined && args.april_detection !== null) {
      this.april_detection = new apriltag_ttypes.AprilDetectionConfig(args.april_detection);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field april_detection is unset!');
    }
    if (args.pathfinding !== undefined && args.pathfinding !== null) {
      this.pathfinding = new pathfinding_ttypes.PathfindingConfig(args.pathfinding);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pathfinding is unset!');
    }
    if (args.record_replay !== undefined && args.record_replay !== null) {
      this.record_replay = args.record_replay;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field record_replay is unset!');
    }
    if (args.replay_folder_path !== undefined && args.replay_folder_path !== null) {
      this.replay_folder_path = args.replay_folder_path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replay_folder_path is unset!');
    }
  }
};
Config.prototype = {};
Config.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos_extrapolator = new pos_extrapolator_ttypes.PosExtrapolator();
        this.pos_extrapolator[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cameras = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new camera_ttypes.CameraParameters();
          elem3[Symbol.for("read")](input);
          this.cameras.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.lidar_configs = {};
        var _rtmp35 = input.readMapBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var key7 = null;
          var val8 = null;
          key7 = input.readString();
          val8 = new lidar_ttypes.LidarConfig();
          val8[Symbol.for("read")](input);
          this.lidar_configs[key7] = val8;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.april_detection = new apriltag_ttypes.AprilDetectionConfig();
        this.april_detection[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pathfinding = new pathfinding_ttypes.PathfindingConfig();
        this.pathfinding[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.record_replay = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.replay_folder_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Config.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Config');
  if (this.pos_extrapolator !== null && this.pos_extrapolator !== undefined) {
    output.writeFieldBegin('pos_extrapolator', Thrift.Type.STRUCT, 1);
    this.pos_extrapolator[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.cameras !== null && this.cameras !== undefined) {
    output.writeFieldBegin('cameras', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cameras.length);
    for (var iter9 in this.cameras) {
      if (this.cameras.hasOwnProperty(iter9)) {
        iter9 = this.cameras[iter9];
        iter9[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lidar_configs !== null && this.lidar_configs !== undefined) {
    output.writeFieldBegin('lidar_configs', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.lidar_configs));
    for (var kiter10 in this.lidar_configs) {
      if (this.lidar_configs.hasOwnProperty(kiter10)) {
        var viter11 = this.lidar_configs[kiter10];
        output.writeString(kiter10);
        viter11[Symbol.for("write")](output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.april_detection !== null && this.april_detection !== undefined) {
    output.writeFieldBegin('april_detection', Thrift.Type.STRUCT, 4);
    this.april_detection[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.pathfinding !== null && this.pathfinding !== undefined) {
    output.writeFieldBegin('pathfinding', Thrift.Type.STRUCT, 5);
    this.pathfinding[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.record_replay !== null && this.record_replay !== undefined) {
    output.writeFieldBegin('record_replay', Thrift.Type.BOOL, 6);
    output.writeBool(this.record_replay);
    output.writeFieldEnd();
  }
  if (this.replay_folder_path !== null && this.replay_folder_path !== undefined) {
    output.writeFieldBegin('replay_folder_path', Thrift.Type.STRING, 7);
    output.writeString(this.replay_folder_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

