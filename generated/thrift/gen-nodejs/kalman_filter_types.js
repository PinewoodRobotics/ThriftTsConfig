//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types.js');


var ttypes = module.exports = {};
ttypes.KalmanFilterSensorType = {
  '0' : 'APRIL_TAG',
  'APRIL_TAG' : 0,
  '1' : 'ODOMETRY',
  'ODOMETRY' : 1,
  '2' : 'IMU',
  'IMU' : 2
};
var KalmanFilterSensorConfig = module.exports.KalmanFilterSensorConfig = function(args) {
  this.measurement_noise_matrix = null;
  this.measurement_conversion_matrix = null;
  if (args) {
    if (args.measurement_noise_matrix !== undefined && args.measurement_noise_matrix !== null) {
      this.measurement_noise_matrix = new common_ttypes.Matrix6x6(args.measurement_noise_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurement_noise_matrix is unset!');
    }
    if (args.measurement_conversion_matrix !== undefined && args.measurement_conversion_matrix !== null) {
      this.measurement_conversion_matrix = new common_ttypes.Matrix6x6(args.measurement_conversion_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurement_conversion_matrix is unset!');
    }
  }
};
KalmanFilterSensorConfig.prototype = {};
KalmanFilterSensorConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.measurement_noise_matrix = new common_ttypes.Matrix6x6();
        this.measurement_noise_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.measurement_conversion_matrix = new common_ttypes.Matrix6x6();
        this.measurement_conversion_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KalmanFilterSensorConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('KalmanFilterSensorConfig');
  if (this.measurement_noise_matrix !== null && this.measurement_noise_matrix !== undefined) {
    output.writeFieldBegin('measurement_noise_matrix', Thrift.Type.STRUCT, 1);
    this.measurement_noise_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.measurement_conversion_matrix !== null && this.measurement_conversion_matrix !== undefined) {
    output.writeFieldBegin('measurement_conversion_matrix', Thrift.Type.STRUCT, 2);
    this.measurement_conversion_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KalmanFilterConfig = module.exports.KalmanFilterConfig = function(args) {
  this.state_vector = null;
  this.state_transition_matrix = null;
  this.uncertainty_matrix = null;
  this.process_noise_matrix = null;
  this.time_step_initial = null;
  this.sensors = null;
  this.dim_x_z = null;
  if (args) {
    if (args.state_vector !== undefined && args.state_vector !== null) {
      this.state_vector = new common_ttypes.Vector6D(args.state_vector);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state_vector is unset!');
    }
    if (args.state_transition_matrix !== undefined && args.state_transition_matrix !== null) {
      this.state_transition_matrix = new common_ttypes.Matrix6x6(args.state_transition_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state_transition_matrix is unset!');
    }
    if (args.uncertainty_matrix !== undefined && args.uncertainty_matrix !== null) {
      this.uncertainty_matrix = new common_ttypes.Matrix6x6(args.uncertainty_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uncertainty_matrix is unset!');
    }
    if (args.process_noise_matrix !== undefined && args.process_noise_matrix !== null) {
      this.process_noise_matrix = new common_ttypes.Matrix6x6(args.process_noise_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field process_noise_matrix is unset!');
    }
    if (args.time_step_initial !== undefined && args.time_step_initial !== null) {
      this.time_step_initial = args.time_step_initial;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time_step_initial is unset!');
    }
    if (args.sensors !== undefined && args.sensors !== null) {
      this.sensors = Thrift.copyMap(args.sensors, [Thrift.copyMap, ttypes.KalmanFilterSensorConfig]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sensors is unset!');
    }
    if (args.dim_x_z !== undefined && args.dim_x_z !== null) {
      this.dim_x_z = Thrift.copyList(args.dim_x_z, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dim_x_z is unset!');
    }
  }
};
KalmanFilterConfig.prototype = {};
KalmanFilterConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_vector = new common_ttypes.Vector6D();
        this.state_vector[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.state_transition_matrix = new common_ttypes.Matrix6x6();
        this.state_transition_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.uncertainty_matrix = new common_ttypes.Matrix6x6();
        this.uncertainty_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.process_noise_matrix = new common_ttypes.Matrix6x6();
        this.process_noise_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.time_step_initial = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.sensors = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readI32();
          val4 = {};
          var _rtmp36 = input.readMapBegin();
          var _size5 = _rtmp36.size || 0;
          for (var _i7 = 0; _i7 < _size5; ++_i7) {
            var key8 = null;
            var val9 = null;
            key8 = input.readString();
            val9 = new ttypes.KalmanFilterSensorConfig();
            val9[Symbol.for("read")](input);
            val4[key8] = val9;
          }
          input.readMapEnd();
          this.sensors[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.dim_x_z = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = input.readI32();
          this.dim_x_z.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KalmanFilterConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('KalmanFilterConfig');
  if (this.state_vector !== null && this.state_vector !== undefined) {
    output.writeFieldBegin('state_vector', Thrift.Type.STRUCT, 1);
    this.state_vector[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.state_transition_matrix !== null && this.state_transition_matrix !== undefined) {
    output.writeFieldBegin('state_transition_matrix', Thrift.Type.STRUCT, 2);
    this.state_transition_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.uncertainty_matrix !== null && this.uncertainty_matrix !== undefined) {
    output.writeFieldBegin('uncertainty_matrix', Thrift.Type.STRUCT, 3);
    this.uncertainty_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.process_noise_matrix !== null && this.process_noise_matrix !== undefined) {
    output.writeFieldBegin('process_noise_matrix', Thrift.Type.STRUCT, 4);
    this.process_noise_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.time_step_initial !== null && this.time_step_initial !== undefined) {
    output.writeFieldBegin('time_step_initial', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.time_step_initial);
    output.writeFieldEnd();
  }
  if (this.sensors !== null && this.sensors !== undefined) {
    output.writeFieldBegin('sensors', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.MAP, Thrift.objectLength(this.sensors));
    for (var kiter14 in this.sensors) {
      if (this.sensors.hasOwnProperty(kiter14)) {
        var viter15 = this.sensors[kiter14];
        output.writeI32(kiter14);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter15));
        for (var kiter16 in viter15) {
          if (viter15.hasOwnProperty(kiter16)) {
            var viter17 = viter15[kiter16];
            output.writeString(kiter16);
            viter17[Symbol.for("write")](output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.dim_x_z !== null && this.dim_x_z !== undefined) {
    output.writeFieldBegin('dim_x_z', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.dim_x_z.length);
    for (var iter18 in this.dim_x_z) {
      if (this.dim_x_z.hasOwnProperty(iter18)) {
        iter18 = this.dim_x_z[iter18];
        output.writeI32(iter18);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

