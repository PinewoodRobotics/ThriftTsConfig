//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types.js');


var ttypes = module.exports = {};
var LidarConfig = module.exports.LidarConfig = function(args) {
  this.pi_to_run_on = null;
  this.port = null;
  this.baudrate = null;
  this.is_2d = null;
  this.min_distance_meters = null;
  this.max_distance_meters = null;
  this.cloud_scan_num = null;
  this.position_in_robot = null;
  this.rotation_in_robot = null;
  if (args) {
    if (args.pi_to_run_on !== undefined && args.pi_to_run_on !== null) {
      this.pi_to_run_on = args.pi_to_run_on;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pi_to_run_on is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
    if (args.baudrate !== undefined && args.baudrate !== null) {
      this.baudrate = args.baudrate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field baudrate is unset!');
    }
    if (args.is_2d !== undefined && args.is_2d !== null) {
      this.is_2d = args.is_2d;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_2d is unset!');
    }
    if (args.min_distance_meters !== undefined && args.min_distance_meters !== null) {
      this.min_distance_meters = args.min_distance_meters;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field min_distance_meters is unset!');
    }
    if (args.max_distance_meters !== undefined && args.max_distance_meters !== null) {
      this.max_distance_meters = args.max_distance_meters;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max_distance_meters is unset!');
    }
    if (args.cloud_scan_num !== undefined && args.cloud_scan_num !== null) {
      this.cloud_scan_num = args.cloud_scan_num;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cloud_scan_num is unset!');
    }
    if (args.position_in_robot !== undefined && args.position_in_robot !== null) {
      this.position_in_robot = new common_ttypes.Vector3D(args.position_in_robot);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field position_in_robot is unset!');
    }
    if (args.rotation_in_robot !== undefined && args.rotation_in_robot !== null) {
      this.rotation_in_robot = new common_ttypes.Matrix3x3(args.rotation_in_robot);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rotation_in_robot is unset!');
    }
  }
};
LidarConfig.prototype = {};
LidarConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pi_to_run_on = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.port = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.baudrate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_2d = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min_distance_meters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max_distance_meters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.cloud_scan_num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.position_in_robot = new common_ttypes.Vector3D();
        this.position_in_robot[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.rotation_in_robot = new common_ttypes.Matrix3x3();
        this.rotation_in_robot[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LidarConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('LidarConfig');
  if (this.pi_to_run_on !== null && this.pi_to_run_on !== undefined) {
    output.writeFieldBegin('pi_to_run_on', Thrift.Type.STRING, 1);
    output.writeString(this.pi_to_run_on);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.STRING, 2);
    output.writeString(this.port);
    output.writeFieldEnd();
  }
  if (this.baudrate !== null && this.baudrate !== undefined) {
    output.writeFieldBegin('baudrate', Thrift.Type.I32, 3);
    output.writeI32(this.baudrate);
    output.writeFieldEnd();
  }
  if (this.is_2d !== null && this.is_2d !== undefined) {
    output.writeFieldBegin('is_2d', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_2d);
    output.writeFieldEnd();
  }
  if (this.min_distance_meters !== null && this.min_distance_meters !== undefined) {
    output.writeFieldBegin('min_distance_meters', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.min_distance_meters);
    output.writeFieldEnd();
  }
  if (this.max_distance_meters !== null && this.max_distance_meters !== undefined) {
    output.writeFieldBegin('max_distance_meters', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.max_distance_meters);
    output.writeFieldEnd();
  }
  if (this.cloud_scan_num !== null && this.cloud_scan_num !== undefined) {
    output.writeFieldBegin('cloud_scan_num', Thrift.Type.I32, 7);
    output.writeI32(this.cloud_scan_num);
    output.writeFieldEnd();
  }
  if (this.position_in_robot !== null && this.position_in_robot !== undefined) {
    output.writeFieldBegin('position_in_robot', Thrift.Type.STRUCT, 8);
    this.position_in_robot[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.rotation_in_robot !== null && this.rotation_in_robot !== undefined) {
    output.writeFieldBegin('rotation_in_robot', Thrift.Type.STRUCT, 9);
    this.rotation_in_robot[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

