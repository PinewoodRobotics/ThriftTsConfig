//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types.js');


var ttypes = module.exports = {};
var LidarConfig = module.exports.LidarConfig = function(args) {
  this.use_lidar = null;
  this.lidar_voxel_size_meters = null;
  this.lidar_pub_topic = null;
  this.unit_conversion = null;
  if (args) {
    if (args.use_lidar !== undefined && args.use_lidar !== null) {
      this.use_lidar = args.use_lidar;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_lidar is unset!');
    }
    if (args.lidar_voxel_size_meters !== undefined && args.lidar_voxel_size_meters !== null) {
      this.lidar_voxel_size_meters = args.lidar_voxel_size_meters;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lidar_voxel_size_meters is unset!');
    }
    if (args.lidar_pub_topic !== undefined && args.lidar_pub_topic !== null) {
      this.lidar_pub_topic = args.lidar_pub_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lidar_pub_topic is unset!');
    }
    if (args.unit_conversion !== undefined && args.unit_conversion !== null) {
      this.unit_conversion = new common_ttypes.UnitConversion(args.unit_conversion);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unit_conversion is unset!');
    }
  }
};
LidarConfig.prototype = {};
LidarConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.use_lidar = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lidar_voxel_size_meters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lidar_pub_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.unit_conversion = new common_ttypes.UnitConversion();
        this.unit_conversion[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LidarConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('LidarConfig');
  if (this.use_lidar !== null && this.use_lidar !== undefined) {
    output.writeFieldBegin('use_lidar', Thrift.Type.BOOL, 1);
    output.writeBool(this.use_lidar);
    output.writeFieldEnd();
  }
  if (this.lidar_voxel_size_meters !== null && this.lidar_voxel_size_meters !== undefined) {
    output.writeFieldBegin('lidar_voxel_size_meters', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lidar_voxel_size_meters);
    output.writeFieldEnd();
  }
  if (this.lidar_pub_topic !== null && this.lidar_pub_topic !== undefined) {
    output.writeFieldBegin('lidar_pub_topic', Thrift.Type.STRING, 3);
    output.writeString(this.lidar_pub_topic);
    output.writeFieldEnd();
  }
  if (this.unit_conversion !== null && this.unit_conversion !== undefined) {
    output.writeFieldBegin('unit_conversion', Thrift.Type.STRUCT, 4);
    this.unit_conversion[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OthersConfig = module.exports.OthersConfig = function(args) {
  this.use_other_robot_positions = null;
  this.unit_conversion = null;
  if (args) {
    if (args.use_other_robot_positions !== undefined && args.use_other_robot_positions !== null) {
      this.use_other_robot_positions = args.use_other_robot_positions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_other_robot_positions is unset!');
    }
    if (args.unit_conversion !== undefined && args.unit_conversion !== null) {
      this.unit_conversion = new common_ttypes.UnitConversion(args.unit_conversion);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unit_conversion is unset!');
    }
  }
};
OthersConfig.prototype = {};
OthersConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.use_other_robot_positions = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unit_conversion = new common_ttypes.UnitConversion();
        this.unit_conversion[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OthersConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('OthersConfig');
  if (this.use_other_robot_positions !== null && this.use_other_robot_positions !== undefined) {
    output.writeFieldBegin('use_other_robot_positions', Thrift.Type.BOOL, 1);
    output.writeBool(this.use_other_robot_positions);
    output.writeFieldEnd();
  }
  if (this.unit_conversion !== null && this.unit_conversion !== undefined) {
    output.writeFieldBegin('unit_conversion', Thrift.Type.STRUCT, 2);
    this.unit_conversion[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PathfindingConfig = module.exports.PathfindingConfig = function(args) {
  this.map_data = null;
  this.lidar_config = null;
  this.others_config = null;
  this.publish_map = null;
  this.map_pub_topic = null;
  if (args) {
    if (args.map_data !== undefined && args.map_data !== null) {
      this.map_data = new common_ttypes.MapData(args.map_data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field map_data is unset!');
    }
    if (args.lidar_config !== undefined && args.lidar_config !== null) {
      this.lidar_config = new ttypes.LidarConfig(args.lidar_config);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lidar_config is unset!');
    }
    if (args.others_config !== undefined && args.others_config !== null) {
      this.others_config = new ttypes.OthersConfig(args.others_config);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field others_config is unset!');
    }
    if (args.publish_map !== undefined && args.publish_map !== null) {
      this.publish_map = args.publish_map;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field publish_map is unset!');
    }
    if (args.map_pub_topic !== undefined && args.map_pub_topic !== null) {
      this.map_pub_topic = args.map_pub_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field map_pub_topic is unset!');
    }
  }
};
PathfindingConfig.prototype = {};
PathfindingConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.map_data = new common_ttypes.MapData();
        this.map_data[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lidar_config = new ttypes.LidarConfig();
        this.lidar_config[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.others_config = new ttypes.OthersConfig();
        this.others_config[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.publish_map = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.map_pub_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PathfindingConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('PathfindingConfig');
  if (this.map_data !== null && this.map_data !== undefined) {
    output.writeFieldBegin('map_data', Thrift.Type.STRUCT, 1);
    this.map_data[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.lidar_config !== null && this.lidar_config !== undefined) {
    output.writeFieldBegin('lidar_config', Thrift.Type.STRUCT, 2);
    this.lidar_config[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.others_config !== null && this.others_config !== undefined) {
    output.writeFieldBegin('others_config', Thrift.Type.STRUCT, 3);
    this.others_config[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.publish_map !== null && this.publish_map !== undefined) {
    output.writeFieldBegin('publish_map', Thrift.Type.BOOL, 4);
    output.writeBool(this.publish_map);
    output.writeFieldEnd();
  }
  if (this.map_pub_topic !== null && this.map_pub_topic !== undefined) {
    output.writeFieldBegin('map_pub_topic', Thrift.Type.STRING, 5);
    output.writeString(this.map_pub_topic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

