//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var AprilDetectionMessageConfig = module.exports.AprilDetectionMessageConfig = function(args) {
  this.post_camera_output_topic = null;
  this.post_tag_output_topic = null;
  if (args) {
    if (args.post_camera_output_topic !== undefined && args.post_camera_output_topic !== null) {
      this.post_camera_output_topic = args.post_camera_output_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_camera_output_topic is unset!');
    }
    if (args.post_tag_output_topic !== undefined && args.post_tag_output_topic !== null) {
      this.post_tag_output_topic = args.post_tag_output_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_tag_output_topic is unset!');
    }
  }
};
AprilDetectionMessageConfig.prototype = {};
AprilDetectionMessageConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.post_camera_output_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.post_tag_output_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AprilDetectionMessageConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('AprilDetectionMessageConfig');
  if (this.post_camera_output_topic !== null && this.post_camera_output_topic !== undefined) {
    output.writeFieldBegin('post_camera_output_topic', Thrift.Type.STRING, 1);
    output.writeString(this.post_camera_output_topic);
    output.writeFieldEnd();
  }
  if (this.post_tag_output_topic !== null && this.post_tag_output_topic !== undefined) {
    output.writeFieldBegin('post_tag_output_topic', Thrift.Type.STRING, 2);
    output.writeString(this.post_tag_output_topic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AprilDetectionConfig = module.exports.AprilDetectionConfig = function(args) {
  this.tag_size = null;
  this.family = null;
  this.nthreads = null;
  this.quad_decimate = null;
  this.quad_sigma = null;
  this.refine_edges = null;
  this.decode_sharpening = null;
  this.searchpath = null;
  this.debug = null;
  this.message = null;
  this.send_stats = null;
  this.stats_topic = null;
  if (args) {
    if (args.tag_size !== undefined && args.tag_size !== null) {
      this.tag_size = args.tag_size;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tag_size is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.nthreads !== undefined && args.nthreads !== null) {
      this.nthreads = args.nthreads;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nthreads is unset!');
    }
    if (args.quad_decimate !== undefined && args.quad_decimate !== null) {
      this.quad_decimate = args.quad_decimate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field quad_decimate is unset!');
    }
    if (args.quad_sigma !== undefined && args.quad_sigma !== null) {
      this.quad_sigma = args.quad_sigma;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field quad_sigma is unset!');
    }
    if (args.refine_edges !== undefined && args.refine_edges !== null) {
      this.refine_edges = args.refine_edges;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refine_edges is unset!');
    }
    if (args.decode_sharpening !== undefined && args.decode_sharpening !== null) {
      this.decode_sharpening = args.decode_sharpening;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field decode_sharpening is unset!');
    }
    if (args.searchpath !== undefined && args.searchpath !== null) {
      this.searchpath = Thrift.copyList(args.searchpath, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field searchpath is unset!');
    }
    if (args.debug !== undefined && args.debug !== null) {
      this.debug = args.debug;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field debug is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.AprilDetectionMessageConfig(args.message);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.send_stats !== undefined && args.send_stats !== null) {
      this.send_stats = args.send_stats;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field send_stats is unset!');
    }
    if (args.stats_topic !== undefined && args.stats_topic !== null) {
      this.stats_topic = args.stats_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stats_topic is unset!');
    }
  }
};
AprilDetectionConfig.prototype = {};
AprilDetectionConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tag_size = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.nthreads = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.quad_decimate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.quad_sigma = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.refine_edges = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.decode_sharpening = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.searchpath = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.searchpath.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.debug = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.AprilDetectionMessageConfig();
        this.message[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.send_stats = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.stats_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AprilDetectionConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('AprilDetectionConfig');
  if (this.tag_size !== null && this.tag_size !== undefined) {
    output.writeFieldBegin('tag_size', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.tag_size);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 2);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.nthreads !== null && this.nthreads !== undefined) {
    output.writeFieldBegin('nthreads', Thrift.Type.I32, 3);
    output.writeI32(this.nthreads);
    output.writeFieldEnd();
  }
  if (this.quad_decimate !== null && this.quad_decimate !== undefined) {
    output.writeFieldBegin('quad_decimate', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.quad_decimate);
    output.writeFieldEnd();
  }
  if (this.quad_sigma !== null && this.quad_sigma !== undefined) {
    output.writeFieldBegin('quad_sigma', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.quad_sigma);
    output.writeFieldEnd();
  }
  if (this.refine_edges !== null && this.refine_edges !== undefined) {
    output.writeFieldBegin('refine_edges', Thrift.Type.BOOL, 6);
    output.writeBool(this.refine_edges);
    output.writeFieldEnd();
  }
  if (this.decode_sharpening !== null && this.decode_sharpening !== undefined) {
    output.writeFieldBegin('decode_sharpening', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.decode_sharpening);
    output.writeFieldEnd();
  }
  if (this.searchpath !== null && this.searchpath !== undefined) {
    output.writeFieldBegin('searchpath', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.searchpath.length);
    for (var iter4 in this.searchpath) {
      if (this.searchpath.hasOwnProperty(iter4)) {
        iter4 = this.searchpath[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debug !== null && this.debug !== undefined) {
    output.writeFieldBegin('debug', Thrift.Type.BOOL, 9);
    output.writeBool(this.debug);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 10);
    this.message[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.send_stats !== null && this.send_stats !== undefined) {
    output.writeFieldBegin('send_stats', Thrift.Type.BOOL, 11);
    output.writeBool(this.send_stats);
    output.writeFieldEnd();
  }
  if (this.stats_topic !== null && this.stats_topic !== undefined) {
    output.writeFieldBegin('stats_topic', Thrift.Type.STRING, 12);
    output.writeString(this.stats_topic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

