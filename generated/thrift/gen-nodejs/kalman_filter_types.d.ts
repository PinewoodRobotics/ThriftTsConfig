//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import common_ttypes = require('./common_types.js');



declare enum KalmanFilterSensorType {
  APRIL_TAG = 0,
  ODOMETRY = 1,
  IMU = 2,
}

declare class KalmanFilterSensorConfig {
  public measurement_noise_matrix: common_ttypes.Matrix6x6;
  public measurement_conversion_matrix: common_ttypes.Matrix6x6;

    constructor(args?: { measurement_noise_matrix: common_ttypes.Matrix6x6; measurement_conversion_matrix: common_ttypes.Matrix6x6; });
}

declare class KalmanFilterConfig {
  public state_vector: common_ttypes.Vector6D;
  public state_transition_matrix: common_ttypes.Matrix6x6;
  public uncertainty_matrix: common_ttypes.Matrix6x6;
  public process_noise_matrix: common_ttypes.Matrix6x6;
  public time_step_initial: number;
  public sensors: { [k: number /*KalmanFilterSensorType*/]: { [k: string]: KalmanFilterSensorConfig; }; };
  public dim_x_z: number[];

    constructor(args?: { state_vector: common_ttypes.Vector6D; state_transition_matrix: common_ttypes.Matrix6x6; uncertainty_matrix: common_ttypes.Matrix6x6; process_noise_matrix: common_ttypes.Matrix6x6; time_step_initial: number; sensors: { [k: number /*KalmanFilterSensorType*/]: { [k: string]: KalmanFilterSensorConfig; }; }; dim_x_z: number[]; });
}
