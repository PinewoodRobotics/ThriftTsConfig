//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


declare class Vector2D {
  public k1: number;
  public k2: number;

    constructor(args?: { k1: number; k2: number; });
}

declare class Vector3D {
  public k1: number;
  public k2: number;
  public k3: number;

    constructor(args?: { k1: number; k2: number; k3: number; });
}

declare class Vector4D {
  public k1: number;
  public k2: number;
  public k3: number;
  public k4: number;

    constructor(args?: { k1: number; k2: number; k3: number; k4: number; });
}

declare class Vector5D {
  public k1: number;
  public k2: number;
  public k3: number;
  public k4: number;
  public k5: number;

    constructor(args?: { k1: number; k2: number; k3: number; k4: number; k5: number; });
}

declare class Vector6D {
  public k1: number;
  public k2: number;
  public k3: number;
  public k4: number;
  public k5: number;
  public k6: number;

    constructor(args?: { k1: number; k2: number; k3: number; k4: number; k5: number; k6: number; });
}

declare class Point3 {
  public position: Vector3D;
  public rotation: Matrix3x3;

    constructor(args?: { position: Vector3D; rotation: Matrix3x3; });
}

declare class Matrix3x3 {
  public r1: Vector3D;
  public r2: Vector3D;
  public r3: Vector3D;

    constructor(args?: { r1: Vector3D; r2: Vector3D; r3: Vector3D; });
}

declare class Matrix4x4 {
  public r1: Vector4D;
  public r2: Vector4D;
  public r3: Vector4D;
  public r4: Vector4D;

    constructor(args?: { r1: Vector4D; r2: Vector4D; r3: Vector4D; r4: Vector4D; });
}

declare class Matrix5x5 {
  public r1: Vector5D;
  public r2: Vector5D;
  public r3: Vector5D;
  public r4: Vector5D;
  public r5: Vector5D;

    constructor(args?: { r1: Vector5D; r2: Vector5D; r3: Vector5D; r4: Vector5D; r5: Vector5D; });
}

declare class Matrix6x6 {
  public r1: Vector6D;
  public r2: Vector6D;
  public r3: Vector6D;
  public r4: Vector6D;
  public r5: Vector6D;
  public r6: Vector6D;

    constructor(args?: { r1: Vector6D; r2: Vector6D; r3: Vector6D; r4: Vector6D; r5: Vector6D; r6: Vector6D; });
}

declare class UnitConversion {
  public non_unit_to_unit: number;
  public unit_to_non_unit: number;

    constructor(args?: { non_unit_to_unit: number; unit_to_non_unit: number; });
}

declare class MapData {
  public map_data: boolean[];
  public map_size_x: number;
  public map_size_y: number;

    constructor(args?: { map_data: boolean[]; map_size_x: number; map_size_y: number; });
}
