//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types.js');
var kalman_filter_ttypes = require('./kalman_filter_types.js');


var ttypes = module.exports = {};
var PosExtrapolatorMessageConfig = module.exports.PosExtrapolatorMessageConfig = function(args) {
  this.post_tag_input_topic = null;
  this.post_odometry_input_topic = null;
  this.post_imu_input_topic = null;
  this.post_robot_position_output_topic = null;
  if (args) {
    if (args.post_tag_input_topic !== undefined && args.post_tag_input_topic !== null) {
      this.post_tag_input_topic = args.post_tag_input_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_tag_input_topic is unset!');
    }
    if (args.post_odometry_input_topic !== undefined && args.post_odometry_input_topic !== null) {
      this.post_odometry_input_topic = args.post_odometry_input_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_odometry_input_topic is unset!');
    }
    if (args.post_imu_input_topic !== undefined && args.post_imu_input_topic !== null) {
      this.post_imu_input_topic = args.post_imu_input_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_imu_input_topic is unset!');
    }
    if (args.post_robot_position_output_topic !== undefined && args.post_robot_position_output_topic !== null) {
      this.post_robot_position_output_topic = args.post_robot_position_output_topic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_robot_position_output_topic is unset!');
    }
  }
};
PosExtrapolatorMessageConfig.prototype = {};
PosExtrapolatorMessageConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.post_tag_input_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.post_odometry_input_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.post_imu_input_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.post_robot_position_output_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PosExtrapolatorMessageConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('PosExtrapolatorMessageConfig');
  if (this.post_tag_input_topic !== null && this.post_tag_input_topic !== undefined) {
    output.writeFieldBegin('post_tag_input_topic', Thrift.Type.STRING, 1);
    output.writeString(this.post_tag_input_topic);
    output.writeFieldEnd();
  }
  if (this.post_odometry_input_topic !== null && this.post_odometry_input_topic !== undefined) {
    output.writeFieldBegin('post_odometry_input_topic', Thrift.Type.STRING, 2);
    output.writeString(this.post_odometry_input_topic);
    output.writeFieldEnd();
  }
  if (this.post_imu_input_topic !== null && this.post_imu_input_topic !== undefined) {
    output.writeFieldBegin('post_imu_input_topic', Thrift.Type.STRING, 3);
    output.writeString(this.post_imu_input_topic);
    output.writeFieldEnd();
  }
  if (this.post_robot_position_output_topic !== null && this.post_robot_position_output_topic !== undefined) {
    output.writeFieldBegin('post_robot_position_output_topic', Thrift.Type.STRING, 4);
    output.writeString(this.post_robot_position_output_topic);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OdomConfig = module.exports.OdomConfig = function(args) {
  this.use_position = null;
  this.use_rotation = null;
  this.imu_robot_position = null;
  if (args) {
    if (args.use_position !== undefined && args.use_position !== null) {
      this.use_position = args.use_position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_position is unset!');
    }
    if (args.use_rotation !== undefined && args.use_rotation !== null) {
      this.use_rotation = args.use_rotation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_rotation is unset!');
    }
    if (args.imu_robot_position !== undefined && args.imu_robot_position !== null) {
      this.imu_robot_position = new common_ttypes.Point3(args.imu_robot_position);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field imu_robot_position is unset!');
    }
  }
};
OdomConfig.prototype = {};
OdomConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.use_position = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.use_rotation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.imu_robot_position = new common_ttypes.Point3();
        this.imu_robot_position[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OdomConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('OdomConfig');
  if (this.use_position !== null && this.use_position !== undefined) {
    output.writeFieldBegin('use_position', Thrift.Type.BOOL, 1);
    output.writeBool(this.use_position);
    output.writeFieldEnd();
  }
  if (this.use_rotation !== null && this.use_rotation !== undefined) {
    output.writeFieldBegin('use_rotation', Thrift.Type.BOOL, 2);
    output.writeBool(this.use_rotation);
    output.writeFieldEnd();
  }
  if (this.imu_robot_position !== null && this.imu_robot_position !== undefined) {
    output.writeFieldBegin('imu_robot_position', Thrift.Type.STRUCT, 3);
    this.imu_robot_position[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ImuConfig = module.exports.ImuConfig = function(args) {
  this.use_rotation = null;
  this.use_position = null;
  this.use_velocity = null;
  this.imu_robot_position = null;
  if (args) {
    if (args.use_rotation !== undefined && args.use_rotation !== null) {
      this.use_rotation = args.use_rotation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_rotation is unset!');
    }
    if (args.use_position !== undefined && args.use_position !== null) {
      this.use_position = args.use_position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_position is unset!');
    }
    if (args.use_velocity !== undefined && args.use_velocity !== null) {
      this.use_velocity = args.use_velocity;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field use_velocity is unset!');
    }
    if (args.imu_robot_position !== undefined && args.imu_robot_position !== null) {
      this.imu_robot_position = new common_ttypes.Point3(args.imu_robot_position);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field imu_robot_position is unset!');
    }
  }
};
ImuConfig.prototype = {};
ImuConfig.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.use_rotation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.use_position = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.use_velocity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.imu_robot_position = new common_ttypes.Point3();
        this.imu_robot_position[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImuConfig.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ImuConfig');
  if (this.use_rotation !== null && this.use_rotation !== undefined) {
    output.writeFieldBegin('use_rotation', Thrift.Type.BOOL, 1);
    output.writeBool(this.use_rotation);
    output.writeFieldEnd();
  }
  if (this.use_position !== null && this.use_position !== undefined) {
    output.writeFieldBegin('use_position', Thrift.Type.BOOL, 2);
    output.writeBool(this.use_position);
    output.writeFieldEnd();
  }
  if (this.use_velocity !== null && this.use_velocity !== undefined) {
    output.writeFieldBegin('use_velocity', Thrift.Type.BOOL, 3);
    output.writeBool(this.use_velocity);
    output.writeFieldEnd();
  }
  if (this.imu_robot_position !== null && this.imu_robot_position !== undefined) {
    output.writeFieldBegin('imu_robot_position', Thrift.Type.STRUCT, 4);
    this.imu_robot_position[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PosExtrapolator = module.exports.PosExtrapolator = function(args) {
  this.message_config = null;
  this.tag_position_config = null;
  this.tag_confidence_threshold = null;
  this.april_tag_discard_distance = null;
  this.enable_imu = null;
  this.enable_odom = null;
  this.enable_tags = null;
  this.odom_config = null;
  this.imu_config = null;
  this.kalman_filter_config = null;
  this.camera_position_config = null;
  this.time_s_between_position_sends = null;
  this.composite_publish_topic = null;
  this.tag_use_imu_rotation = null;
  if (args) {
    if (args.message_config !== undefined && args.message_config !== null) {
      this.message_config = new ttypes.PosExtrapolatorMessageConfig(args.message_config);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message_config is unset!');
    }
    if (args.tag_position_config !== undefined && args.tag_position_config !== null) {
      this.tag_position_config = Thrift.copyMap(args.tag_position_config, [common_ttypes.Point3]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tag_position_config is unset!');
    }
    if (args.tag_confidence_threshold !== undefined && args.tag_confidence_threshold !== null) {
      this.tag_confidence_threshold = args.tag_confidence_threshold;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tag_confidence_threshold is unset!');
    }
    if (args.april_tag_discard_distance !== undefined && args.april_tag_discard_distance !== null) {
      this.april_tag_discard_distance = args.april_tag_discard_distance;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field april_tag_discard_distance is unset!');
    }
    if (args.enable_imu !== undefined && args.enable_imu !== null) {
      this.enable_imu = args.enable_imu;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable_imu is unset!');
    }
    if (args.enable_odom !== undefined && args.enable_odom !== null) {
      this.enable_odom = args.enable_odom;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable_odom is unset!');
    }
    if (args.enable_tags !== undefined && args.enable_tags !== null) {
      this.enable_tags = args.enable_tags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable_tags is unset!');
    }
    if (args.odom_config !== undefined && args.odom_config !== null) {
      this.odom_config = new ttypes.OdomConfig(args.odom_config);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field odom_config is unset!');
    }
    if (args.imu_config !== undefined && args.imu_config !== null) {
      this.imu_config = Thrift.copyMap(args.imu_config, [ttypes.ImuConfig]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field imu_config is unset!');
    }
    if (args.kalman_filter_config !== undefined && args.kalman_filter_config !== null) {
      this.kalman_filter_config = new kalman_filter_ttypes.KalmanFilterConfig(args.kalman_filter_config);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kalman_filter_config is unset!');
    }
    if (args.camera_position_config !== undefined && args.camera_position_config !== null) {
      this.camera_position_config = Thrift.copyMap(args.camera_position_config, [common_ttypes.Point3]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field camera_position_config is unset!');
    }
    if (args.time_s_between_position_sends !== undefined && args.time_s_between_position_sends !== null) {
      this.time_s_between_position_sends = args.time_s_between_position_sends;
    }
    if (args.composite_publish_topic !== undefined && args.composite_publish_topic !== null) {
      this.composite_publish_topic = args.composite_publish_topic;
    }
    if (args.tag_use_imu_rotation !== undefined && args.tag_use_imu_rotation !== null) {
      this.tag_use_imu_rotation = args.tag_use_imu_rotation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tag_use_imu_rotation is unset!');
    }
  }
};
PosExtrapolator.prototype = {};
PosExtrapolator.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message_config = new ttypes.PosExtrapolatorMessageConfig();
        this.message_config[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.tag_position_config = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readI32();
          val4 = new common_ttypes.Point3();
          val4[Symbol.for("read")](input);
          this.tag_position_config[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tag_confidence_threshold = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.april_tag_discard_distance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_imu = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_odom = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_tags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.odom_config = new ttypes.OdomConfig();
        this.odom_config[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.imu_config = {};
        var _rtmp36 = input.readMapBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var key8 = null;
          var val9 = null;
          key8 = input.readString();
          val9 = new ttypes.ImuConfig();
          val9[Symbol.for("read")](input);
          this.imu_config[key8] = val9;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.kalman_filter_config = new kalman_filter_ttypes.KalmanFilterConfig();
        this.kalman_filter_config[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        this.camera_position_config = {};
        var _rtmp311 = input.readMapBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = new common_ttypes.Point3();
          val14[Symbol.for("read")](input);
          this.camera_position_config[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.time_s_between_position_sends = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.composite_publish_topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.tag_use_imu_rotation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PosExtrapolator.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('PosExtrapolator');
  if (this.message_config !== null && this.message_config !== undefined) {
    output.writeFieldBegin('message_config', Thrift.Type.STRUCT, 1);
    this.message_config[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.tag_position_config !== null && this.tag_position_config !== undefined) {
    output.writeFieldBegin('tag_position_config', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.tag_position_config));
    for (var kiter15 in this.tag_position_config) {
      if (this.tag_position_config.hasOwnProperty(kiter15)) {
        var viter16 = this.tag_position_config[kiter15];
        output.writeI32(kiter15);
        viter16[Symbol.for("write")](output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tag_confidence_threshold !== null && this.tag_confidence_threshold !== undefined) {
    output.writeFieldBegin('tag_confidence_threshold', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.tag_confidence_threshold);
    output.writeFieldEnd();
  }
  if (this.april_tag_discard_distance !== null && this.april_tag_discard_distance !== undefined) {
    output.writeFieldBegin('april_tag_discard_distance', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.april_tag_discard_distance);
    output.writeFieldEnd();
  }
  if (this.enable_imu !== null && this.enable_imu !== undefined) {
    output.writeFieldBegin('enable_imu', Thrift.Type.BOOL, 5);
    output.writeBool(this.enable_imu);
    output.writeFieldEnd();
  }
  if (this.enable_odom !== null && this.enable_odom !== undefined) {
    output.writeFieldBegin('enable_odom', Thrift.Type.BOOL, 6);
    output.writeBool(this.enable_odom);
    output.writeFieldEnd();
  }
  if (this.enable_tags !== null && this.enable_tags !== undefined) {
    output.writeFieldBegin('enable_tags', Thrift.Type.BOOL, 7);
    output.writeBool(this.enable_tags);
    output.writeFieldEnd();
  }
  if (this.odom_config !== null && this.odom_config !== undefined) {
    output.writeFieldBegin('odom_config', Thrift.Type.STRUCT, 8);
    this.odom_config[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.imu_config !== null && this.imu_config !== undefined) {
    output.writeFieldBegin('imu_config', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.imu_config));
    for (var kiter17 in this.imu_config) {
      if (this.imu_config.hasOwnProperty(kiter17)) {
        var viter18 = this.imu_config[kiter17];
        output.writeString(kiter17);
        viter18[Symbol.for("write")](output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.kalman_filter_config !== null && this.kalman_filter_config !== undefined) {
    output.writeFieldBegin('kalman_filter_config', Thrift.Type.STRUCT, 10);
    this.kalman_filter_config[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.camera_position_config !== null && this.camera_position_config !== undefined) {
    output.writeFieldBegin('camera_position_config', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.camera_position_config));
    for (var kiter19 in this.camera_position_config) {
      if (this.camera_position_config.hasOwnProperty(kiter19)) {
        var viter20 = this.camera_position_config[kiter19];
        output.writeString(kiter19);
        viter20[Symbol.for("write")](output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.time_s_between_position_sends !== null && this.time_s_between_position_sends !== undefined) {
    output.writeFieldBegin('time_s_between_position_sends', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.time_s_between_position_sends);
    output.writeFieldEnd();
  }
  if (this.composite_publish_topic !== null && this.composite_publish_topic !== undefined) {
    output.writeFieldBegin('composite_publish_topic', Thrift.Type.STRING, 13);
    output.writeString(this.composite_publish_topic);
    output.writeFieldEnd();
  }
  if (this.tag_use_imu_rotation !== null && this.tag_use_imu_rotation !== undefined) {
    output.writeFieldBegin('tag_use_imu_rotation', Thrift.Type.BOOL, 14);
    output.writeBool(this.tag_use_imu_rotation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

