//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types.js');


var ttypes = module.exports = {};
ttypes.CameraType = {
  '0' : 'OV2311',
  'OV2311' : 0,
  '1' : 'VIDEO_FILE',
  'VIDEO_FILE' : 1,
  '2' : 'MOST_RECENT_RECORDING',
  'MOST_RECENT_RECORDING' : 2
};
var CameraParameters = module.exports.CameraParameters = function(args) {
  this.pi_to_run_on = null;
  this.camera_matrix = null;
  this.dist_coeff = null;
  this.camera_path = null;
  this.max_fps = null;
  this.width = null;
  this.height = null;
  this.flags = null;
  this.exposure_time = null;
  this.name = null;
  this.camera_type = null;
  this.video_file_path = null;
  if (args) {
    if (args.pi_to_run_on !== undefined && args.pi_to_run_on !== null) {
      this.pi_to_run_on = args.pi_to_run_on;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pi_to_run_on is unset!');
    }
    if (args.camera_matrix !== undefined && args.camera_matrix !== null) {
      this.camera_matrix = new common_ttypes.Matrix3x3(args.camera_matrix);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field camera_matrix is unset!');
    }
    if (args.dist_coeff !== undefined && args.dist_coeff !== null) {
      this.dist_coeff = new common_ttypes.Vector5D(args.dist_coeff);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dist_coeff is unset!');
    }
    if (args.camera_path !== undefined && args.camera_path !== null) {
      this.camera_path = args.camera_path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field camera_path is unset!');
    }
    if (args.max_fps !== undefined && args.max_fps !== null) {
      this.max_fps = args.max_fps;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field max_fps is unset!');
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field width is unset!');
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field height is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
    if (args.exposure_time !== undefined && args.exposure_time !== null) {
      this.exposure_time = args.exposure_time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field exposure_time is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.camera_type !== undefined && args.camera_type !== null) {
      this.camera_type = args.camera_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field camera_type is unset!');
    }
    if (args.video_file_path !== undefined && args.video_file_path !== null) {
      this.video_file_path = args.video_file_path;
    }
  }
};
CameraParameters.prototype = {};
CameraParameters.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pi_to_run_on = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.camera_matrix = new common_ttypes.Matrix3x3();
        this.camera_matrix[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dist_coeff = new common_ttypes.Vector5D();
        this.dist_coeff[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.camera_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.max_fps = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.exposure_time = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.camera_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.video_file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CameraParameters.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('CameraParameters');
  if (this.pi_to_run_on !== null && this.pi_to_run_on !== undefined) {
    output.writeFieldBegin('pi_to_run_on', Thrift.Type.STRING, 1);
    output.writeString(this.pi_to_run_on);
    output.writeFieldEnd();
  }
  if (this.camera_matrix !== null && this.camera_matrix !== undefined) {
    output.writeFieldBegin('camera_matrix', Thrift.Type.STRUCT, 2);
    this.camera_matrix[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.dist_coeff !== null && this.dist_coeff !== undefined) {
    output.writeFieldBegin('dist_coeff', Thrift.Type.STRUCT, 3);
    this.dist_coeff[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.camera_path !== null && this.camera_path !== undefined) {
    output.writeFieldBegin('camera_path', Thrift.Type.STRING, 4);
    output.writeString(this.camera_path);
    output.writeFieldEnd();
  }
  if (this.max_fps !== null && this.max_fps !== undefined) {
    output.writeFieldBegin('max_fps', Thrift.Type.I32, 5);
    output.writeI32(this.max_fps);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 6);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 7);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 8);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.exposure_time !== null && this.exposure_time !== undefined) {
    output.writeFieldBegin('exposure_time', Thrift.Type.I32, 9);
    output.writeI32(this.exposure_time);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.camera_type !== null && this.camera_type !== undefined) {
    output.writeFieldBegin('camera_type', Thrift.Type.I32, 11);
    output.writeI32(this.camera_type);
    output.writeFieldEnd();
  }
  if (this.video_file_path !== null && this.video_file_path !== undefined) {
    output.writeFieldBegin('video_file_path', Thrift.Type.STRING, 12);
    output.writeString(this.video_file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

